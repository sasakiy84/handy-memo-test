# handy-memo プロジェクトのための Cline ルール

## コア技術とスタイル
- **言語:** TypeScript ではなく JavaScript を使用する。
- **コーディングスタイル:** strict な TypeScript のように、型を強く意識して JavaScript を記述する。実装前に、まず関数のシグネチャと型を検討する。標準的な JavaScript のベストプラクティスに従う。
- **CSS:** スタイリングにはピュア CSS を使用する。CSS フレームワークは避ける。以下を含むモダンな CSS 機能を利用する：
    - CSS Grid Layout
    - CSS カスタムプロパティ (変数)
    - `:has()` 疑似クラス
    - `:not()` 疑似クラス
    - `:root` 疑似クラス
    - コンテナクエリ
    - など
- **依存関係:** 外部ライブラリの使用は最小限にする。可能な限りネイティブのブラウザ API を優先する。

## アプリケーションアーキテクチャと機能
- **ファイルハンドリング:** ユーザーのメモファイルとのすべてのやり取りには File System API を使用する。
- **データフォーマット:**
    - メモは Markdown リスト形式で保存する。
    - 各メモエントリは `- ` で始まり、`YYYY-MM-DDTHH:MM:SS` 形式のタイムスタンプ、スペース、そしてメモ内容が続く形式でなければならない。(例: `- 2023-10-01T12:00:00 これはメモです。`)
    - 新しいメモはファイル内容の末尾に追加する。
- **表示ロジック:** ユーザーインターフェースでは、メモを逆時系列順（新しいものが先）で表示する。
- **永続化:** アクセスしたメモファイルハンドルの履歴を保存するためにブラウザのローカルストレージを使用する。
- **PWA:** アプリケーションがプログレッシブウェブアプリとして機能することを確認する：
    - オフラインキャッシングと可用性のために Service Worker を実装する。
    - インストールを可能にするために `manifest.json` ファイルを提供する。
- **UI/UX:**
    - シンプルで落ち着いた視覚的デザインを維持する。
    - レイアウトがレスポンシブであり、モバイルデバイスでうまく機能することを確認する。
    - アイコンには Material Icons (Google Icons) を使用する。
    - 説明されている画面フロー（ファイル選択 -> メモ閲覧/編集）に従う。

## 開発プロセス
- **モジュール性:** コードを論理的なモジュール/ファイルに構造化する。
- **コメント:** 複雑なロジックや自明でないコードセクションを説明するために、必要に応じてコメントを追加する。
- **エラーハンドリング:** 特に File System API の相互作用周りで、基本的なエラーハンドリングを実装する。
